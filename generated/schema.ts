// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("tokenAddress", Value.fromBytes(Bytes.empty()));
    this.set("amountAllocated", Value.fromBigInt(BigInt.zero()));
    this.set("owner", Value.fromString(""));
    this.set("ownerinheritor", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Token entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Token entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Token", id.toString(), this);
    }
  }

  static load(id: string): Token | null {
    return changetype<Token | null>(store.get("Token", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    return value!.toBytes();
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get amount(): BigInt | null {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt | null) {
    if (!value) {
      this.unset("amount");
    } else {
      this.set("amount", Value.fromBigInt(<BigInt>value));
    }
  }

  get amountAllocated(): BigInt {
    let value = this.get("amountAllocated");
    return value!.toBigInt();
  }

  set amountAllocated(value: BigInt) {
    this.set("amountAllocated", Value.fromBigInt(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get ownerinheritor(): string {
    let value = this.get("ownerinheritor");
    return value!.toString();
  }

  set ownerinheritor(value: string) {
    this.set("ownerinheritor", Value.fromString(value));
  }
}

export class Inheritor extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("vaultId", Value.fromStringArray(new Array(0)));
    this.set("ethAllocated", Value.fromBigInt(BigInt.zero()));
    this.set("vaults", Value.fromString(""));
    this.set("createdAt", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Inheritor entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Inheritor entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Inheritor", id.toString(), this);
    }
  }

  static load(id: string): Inheritor | null {
    return changetype<Inheritor | null>(store.get("Inheritor", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get vaultId(): Array<string> {
    let value = this.get("vaultId");
    return value!.toStringArray();
  }

  set vaultId(value: Array<string>) {
    this.set("vaultId", Value.fromStringArray(value));
  }

  get ethAllocated(): BigInt {
    let value = this.get("ethAllocated");
    return value!.toBigInt();
  }

  set ethAllocated(value: BigInt) {
    this.set("ethAllocated", Value.fromBigInt(value));
  }

  get vaults(): string {
    let value = this.get("vaults");
    return value!.toString();
  }

  set vaults(value: string) {
    this.set("vaults", Value.fromString(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get tokens(): Array<string> {
    let value = this.get("tokens");
    return value!.toStringArray();
  }

  set tokens(value: Array<string>) {
    this.set("tokens", Value.fromStringArray(value));
  }
}

export class Ping extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("time", Value.fromBigInt(BigInt.zero()));
    this.set("pingtimestamp", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Ping entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Ping entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Ping", id.toString(), this);
    }
  }

  static load(id: string): Ping | null {
    return changetype<Ping | null>(store.get("Ping", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get time(): BigInt {
    let value = this.get("time");
    return value!.toBigInt();
  }

  set time(value: BigInt) {
    this.set("time", Value.fromBigInt(value));
  }

  get pingtimestamp(): string {
    let value = this.get("pingtimestamp");
    return value!.toString();
  }

  set pingtimestamp(value: string) {
    this.set("pingtimestamp", Value.fromString(value));
  }
}

export class Backup extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("address", Value.fromBytes(Bytes.empty()));
    this.set("createdAt", Value.fromBigInt(BigInt.zero()));
    this.set("backupAddress", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Backup entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Backup entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Backup", id.toString(), this);
    }
  }

  static load(id: string): Backup | null {
    return changetype<Backup | null>(store.get("Backup", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get backupAddress(): string {
    let value = this.get("backupAddress");
    return value!.toString();
  }

  set backupAddress(value: string) {
    this.set("backupAddress", Value.fromString(value));
  }
}

export class Vault extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("createdAt", Value.fromBigInt(BigInt.zero()));
    this.set("vaultId", Value.fromBigInt(BigInt.zero()));
    this.set("backup", Value.fromBytes(Bytes.empty()));
    this.set("currentBackupTime", Value.fromBigInt(BigInt.zero()));
    this.set("StartingAmount", Value.fromBigInt(BigInt.zero()));
    this.set("inherit", Value.fromStringArray(new Array(0)));
    this.set("totalEthAllocated", Value.fromBigInt(BigInt.zero()));
    this.set("tokensArray", Value.fromStringArray(new Array(0)));
    this.set("owner", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Vault entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Vault entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Vault", id.toString(), this);
    }
  }

  static load(id: string): Vault | null {
    return changetype<Vault | null>(store.get("Vault", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get vaultId(): BigInt {
    let value = this.get("vaultId");
    return value!.toBigInt();
  }

  set vaultId(value: BigInt) {
    this.set("vaultId", Value.fromBigInt(value));
  }

  get backup(): Bytes {
    let value = this.get("backup");
    return value!.toBytes();
  }

  set backup(value: Bytes) {
    this.set("backup", Value.fromBytes(value));
  }

  get currentBackupTime(): BigInt {
    let value = this.get("currentBackupTime");
    return value!.toBigInt();
  }

  set currentBackupTime(value: BigInt) {
    this.set("currentBackupTime", Value.fromBigInt(value));
  }

  get StartingAmount(): BigInt {
    let value = this.get("StartingAmount");
    return value!.toBigInt();
  }

  set StartingAmount(value: BigInt) {
    this.set("StartingAmount", Value.fromBigInt(value));
  }

  get inherit(): Array<string> {
    let value = this.get("inherit");
    return value!.toStringArray();
  }

  set inherit(value: Array<string>) {
    this.set("inherit", Value.fromStringArray(value));
  }

  get totalEthAllocated(): BigInt {
    let value = this.get("totalEthAllocated");
    return value!.toBigInt();
  }

  set totalEthAllocated(value: BigInt) {
    this.set("totalEthAllocated", Value.fromBigInt(value));
  }

  get tokensArray(): Array<string> {
    let value = this.get("tokensArray");
    return value!.toStringArray();
  }

  set tokensArray(value: Array<string>) {
    this.set("tokensArray", Value.fromStringArray(value));
  }

  get tokens(): Array<string> {
    let value = this.get("tokens");
    return value!.toStringArray();
  }

  set tokens(value: Array<string>) {
    this.set("tokens", Value.fromStringArray(value));
  }

  get inheritors(): Array<string> {
    let value = this.get("inheritors");
    return value!.toStringArray();
  }

  set inheritors(value: Array<string>) {
    this.set("inheritors", Value.fromStringArray(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get pings(): Array<string> {
    let value = this.get("pings");
    return value!.toStringArray();
  }

  set pings(value: Array<string>) {
    this.set("pings", Value.fromStringArray(value));
  }

  get backups(): Array<string> {
    let value = this.get("backups");
    return value!.toStringArray();
  }

  set backups(value: Array<string>) {
    this.set("backups", Value.fromStringArray(value));
  }
}
