// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class SingleTokenHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("amount", Value.fromBigInt(BigInt.zero()));
    this.set("type", Value.fromString(""));
    this.set("hash", Value.fromBytes(Bytes.empty()));
    this.set("createdAt", Value.fromBigInt(BigInt.zero()));
    this.set("token", Value.fromString(""));
    this.set("address", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SingleTokenHistory entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save SingleTokenHistory entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("SingleTokenHistory", id.toString(), this);
    }
  }

  static load(id: string): SingleTokenHistory | null {
    return changetype<SingleTokenHistory | null>(
      store.get("SingleTokenHistory", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get hash(): Bytes {
    let value = this.get("hash");
    return value!.toBytes();
  }

  set hash(value: Bytes) {
    this.set("hash", Value.fromBytes(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("tokenAddress", Value.fromBytes(Bytes.empty()));
    this.set("amountAllocated", Value.fromBigInt(BigInt.zero()));
    this.set("owner", Value.fromString(""));
    this.set("ownerinheritor", Value.fromString(""));
    this.set("allocated", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Token entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Token entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Token", id.toString(), this);
    }
  }

  static load(id: string): Token | null {
    return changetype<Token | null>(store.get("Token", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    return value!.toBytes();
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get amount(): BigInt | null {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt | null) {
    if (!value) {
      this.unset("amount");
    } else {
      this.set("amount", Value.fromBigInt(<BigInt>value));
    }
  }

  get amountAllocated(): BigInt {
    let value = this.get("amountAllocated");
    return value!.toBigInt();
  }

  set amountAllocated(value: BigInt) {
    this.set("amountAllocated", Value.fromBigInt(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get ownerinheritor(): string {
    let value = this.get("ownerinheritor");
    return value!.toString();
  }

  set ownerinheritor(value: string) {
    this.set("ownerinheritor", Value.fromString(value));
  }

  get allocated(): BigInt {
    let value = this.get("allocated");
    return value!.toBigInt();
  }

  set allocated(value: BigInt) {
    this.set("allocated", Value.fromBigInt(value));
  }

  get history(): Array<string> {
    let value = this.get("history");
    return value!.toStringArray();
  }

  set history(value: Array<string>) {
    this.set("history", Value.fromStringArray(value));
  }
}

export class Inheritor extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("vaultId", Value.fromStringArray(new Array(0)));
    this.set("ethAllocated", Value.fromBigInt(BigInt.zero()));
    this.set("vaults", Value.fromString(""));
    this.set("createdAt", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Inheritor entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Inheritor entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Inheritor", id.toString(), this);
    }
  }

  static load(id: string): Inheritor | null {
    return changetype<Inheritor | null>(store.get("Inheritor", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get vaultId(): Array<string> {
    let value = this.get("vaultId");
    return value!.toStringArray();
  }

  set vaultId(value: Array<string>) {
    this.set("vaultId", Value.fromStringArray(value));
  }

  get ethAllocated(): BigInt {
    let value = this.get("ethAllocated");
    return value!.toBigInt();
  }

  set ethAllocated(value: BigInt) {
    this.set("ethAllocated", Value.fromBigInt(value));
  }

  get vaults(): string {
    let value = this.get("vaults");
    return value!.toString();
  }

  set vaults(value: string) {
    this.set("vaults", Value.fromString(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get tokens(): Array<string> {
    let value = this.get("tokens");
    return value!.toStringArray();
  }

  set tokens(value: Array<string>) {
    this.set("tokens", Value.fromStringArray(value));
  }
}

export class Ping extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("time", Value.fromBigInt(BigInt.zero()));
    this.set("pingtimestamp", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Ping entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Ping entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Ping", id.toString(), this);
    }
  }

  static load(id: string): Ping | null {
    return changetype<Ping | null>(store.get("Ping", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get time(): BigInt {
    let value = this.get("time");
    return value!.toBigInt();
  }

  set time(value: BigInt) {
    this.set("time", Value.fromBigInt(value));
  }

  get pingtimestamp(): string {
    let value = this.get("pingtimestamp");
    return value!.toString();
  }

  set pingtimestamp(value: string) {
    this.set("pingtimestamp", Value.fromString(value));
  }
}

export class Backup extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("address", Value.fromBytes(Bytes.empty()));
    this.set("createdAt", Value.fromBigInt(BigInt.zero()));
    this.set("backupAddress", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Backup entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Backup entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Backup", id.toString(), this);
    }
  }

  static load(id: string): Backup | null {
    return changetype<Backup | null>(store.get("Backup", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get backupAddress(): string {
    let value = this.get("backupAddress");
    return value!.toString();
  }

  set backupAddress(value: string) {
    this.set("backupAddress", Value.fromString(value));
  }
}

export class AllocationHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("receipient", Value.fromBytes(Bytes.empty()));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
    this.set("type", Value.fromString(""));
    this.set("vault", Value.fromString(""));
    this.set("createdAt", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AllocationHistory entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save AllocationHistory entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("AllocationHistory", id.toString(), this);
    }
  }

  static load(id: string): AllocationHistory | null {
    return changetype<AllocationHistory | null>(
      store.get("AllocationHistory", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get receipient(): Bytes {
    let value = this.get("receipient");
    return value!.toBytes();
  }

  set receipient(value: Bytes) {
    this.set("receipient", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get assetAddress(): Bytes | null {
    let value = this.get("assetAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set assetAddress(value: Bytes | null) {
    if (!value) {
      this.unset("assetAddress");
    } else {
      this.set("assetAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get vault(): string {
    let value = this.get("vault");
    return value!.toString();
  }

  set vault(value: string) {
    this.set("vault", Value.fromString(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }
}

export class InheritorHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("inheritor", Value.fromBytes(Bytes.empty()));
    this.set("type", Value.fromString(""));
    this.set("vault", Value.fromString(""));
    this.set("createdAt", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save InheritorHistory entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save InheritorHistory entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("InheritorHistory", id.toString(), this);
    }
  }

  static load(id: string): InheritorHistory | null {
    return changetype<InheritorHistory | null>(
      store.get("InheritorHistory", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get inheritor(): Bytes {
    let value = this.get("inheritor");
    return value!.toBytes();
  }

  set inheritor(value: Bytes) {
    this.set("inheritor", Value.fromBytes(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get vault(): string {
    let value = this.get("vault");
    return value!.toString();
  }

  set vault(value: string) {
    this.set("vault", Value.fromString(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }
}

export class TokenTransactionHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("tokenAddress", Value.fromBytes(Bytes.empty()));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
    this.set("type", Value.fromString(""));
    this.set("vault", Value.fromString(""));
    this.set("createdAt", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save TokenTransactionHistory entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save TokenTransactionHistory entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("TokenTransactionHistory", id.toString(), this);
    }
  }

  static load(id: string): TokenTransactionHistory | null {
    return changetype<TokenTransactionHistory | null>(
      store.get("TokenTransactionHistory", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    return value!.toBytes();
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get vault(): string {
    let value = this.get("vault");
    return value!.toString();
  }

  set vault(value: string) {
    this.set("vault", Value.fromString(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }
}

export class Vault extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("createdAt", Value.fromBigInt(BigInt.zero()));
    this.set("vaultId", Value.fromBigInt(BigInt.zero()));
    this.set("backup", Value.fromBytes(Bytes.empty()));
    this.set("currentBackupTime", Value.fromBigInt(BigInt.zero()));
    this.set("StartingAmount", Value.fromBigInt(BigInt.zero()));
    this.set("inherit", Value.fromStringArray(new Array(0)));
    this.set("totalEthAllocated", Value.fromBigInt(BigInt.zero()));
    this.set("tokensArray", Value.fromStringArray(new Array(0)));
    this.set("owner", Value.fromBytes(Bytes.empty()));
    this.set("pingsRecords", Value.fromBigInt(BigInt.zero()));
    this.set("allocationHistoryRecords", Value.fromBigInt(BigInt.zero()));
    this.set("inheritorHistoryRecords", Value.fromBigInt(BigInt.zero()));
    this.set("tokenTransactionHistoryRecords", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Vault entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Vault entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Vault", id.toString(), this);
    }
  }

  static load(id: string): Vault | null {
    return changetype<Vault | null>(store.get("Vault", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get vaultId(): BigInt {
    let value = this.get("vaultId");
    return value!.toBigInt();
  }

  set vaultId(value: BigInt) {
    this.set("vaultId", Value.fromBigInt(value));
  }

  get backup(): Bytes {
    let value = this.get("backup");
    return value!.toBytes();
  }

  set backup(value: Bytes) {
    this.set("backup", Value.fromBytes(value));
  }

  get currentBackupTime(): BigInt {
    let value = this.get("currentBackupTime");
    return value!.toBigInt();
  }

  set currentBackupTime(value: BigInt) {
    this.set("currentBackupTime", Value.fromBigInt(value));
  }

  get StartingAmount(): BigInt {
    let value = this.get("StartingAmount");
    return value!.toBigInt();
  }

  set StartingAmount(value: BigInt) {
    this.set("StartingAmount", Value.fromBigInt(value));
  }

  get inherit(): Array<string> {
    let value = this.get("inherit");
    return value!.toStringArray();
  }

  set inherit(value: Array<string>) {
    this.set("inherit", Value.fromStringArray(value));
  }

  get totalEthAllocated(): BigInt {
    let value = this.get("totalEthAllocated");
    return value!.toBigInt();
  }

  set totalEthAllocated(value: BigInt) {
    this.set("totalEthAllocated", Value.fromBigInt(value));
  }

  get tokensArray(): Array<string> {
    let value = this.get("tokensArray");
    return value!.toStringArray();
  }

  set tokensArray(value: Array<string>) {
    this.set("tokensArray", Value.fromStringArray(value));
  }

  get tokens(): Array<string> {
    let value = this.get("tokens");
    return value!.toStringArray();
  }

  set tokens(value: Array<string>) {
    this.set("tokens", Value.fromStringArray(value));
  }

  get inheritors(): Array<string> {
    let value = this.get("inheritors");
    return value!.toStringArray();
  }

  set inheritors(value: Array<string>) {
    this.set("inheritors", Value.fromStringArray(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get pings(): Array<string> {
    let value = this.get("pings");
    return value!.toStringArray();
  }

  set pings(value: Array<string>) {
    this.set("pings", Value.fromStringArray(value));
  }

  get pingsRecords(): BigInt {
    let value = this.get("pingsRecords");
    return value!.toBigInt();
  }

  set pingsRecords(value: BigInt) {
    this.set("pingsRecords", Value.fromBigInt(value));
  }

  get backups(): Array<string> {
    let value = this.get("backups");
    return value!.toStringArray();
  }

  set backups(value: Array<string>) {
    this.set("backups", Value.fromStringArray(value));
  }

  get backupsRecords(): BigInt | null {
    let value = this.get("backupsRecords");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set backupsRecords(value: BigInt | null) {
    if (!value) {
      this.unset("backupsRecords");
    } else {
      this.set("backupsRecords", Value.fromBigInt(<BigInt>value));
    }
  }

  get allocationHistory(): Array<string> {
    let value = this.get("allocationHistory");
    return value!.toStringArray();
  }

  set allocationHistory(value: Array<string>) {
    this.set("allocationHistory", Value.fromStringArray(value));
  }

  get allocationHistoryRecords(): BigInt {
    let value = this.get("allocationHistoryRecords");
    return value!.toBigInt();
  }

  set allocationHistoryRecords(value: BigInt) {
    this.set("allocationHistoryRecords", Value.fromBigInt(value));
  }

  get inheritorHistory(): Array<string> {
    let value = this.get("inheritorHistory");
    return value!.toStringArray();
  }

  set inheritorHistory(value: Array<string>) {
    this.set("inheritorHistory", Value.fromStringArray(value));
  }

  get inheritorHistoryRecords(): BigInt {
    let value = this.get("inheritorHistoryRecords");
    return value!.toBigInt();
  }

  set inheritorHistoryRecords(value: BigInt) {
    this.set("inheritorHistoryRecords", Value.fromBigInt(value));
  }

  get tokenTransactionHistory(): Array<string> {
    let value = this.get("tokenTransactionHistory");
    return value!.toStringArray();
  }

  set tokenTransactionHistory(value: Array<string>) {
    this.set("tokenTransactionHistory", Value.fromStringArray(value));
  }

  get tokenTransactionHistoryRecords(): BigInt {
    let value = this.get("tokenTransactionHistoryRecords");
    return value!.toBigInt();
  }

  set tokenTransactionHistoryRecords(value: BigInt) {
    this.set("tokenTransactionHistoryRecords", Value.fromBigInt(value));
  }
}
