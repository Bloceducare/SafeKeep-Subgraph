// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ClaimedEth extends ethereum.Event {
  get params(): ClaimedEth__Params {
    return new ClaimedEth__Params(this);
  }
}

export class ClaimedEth__Params {
  _event: ClaimedEth;

  constructor(event: ClaimedEth) {
    this._event = event;
  }

  get inheritor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class EthAllocated extends ethereum.Event {
  get params(): EthAllocated__Params {
    return new EthAllocated__Params(this);
  }
}

export class EthAllocated__Params {
  _event: EthAllocated;

  constructor(event: EthAllocated) {
    this._event = event;
  }

  get inheritors(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get amounts(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }
}

export class EthDeposited extends ethereum.Event {
  get params(): EthDeposited__Params {
    return new EthDeposited__Params(this);
  }
}

export class EthDeposited__Params {
  _event: EthDeposited;

  constructor(event: EthDeposited) {
    this._event = event;
  }

  get _amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class claimedTokens extends ethereum.Event {
  get params(): claimedTokens__Params {
    return new claimedTokens__Params(this);
  }
}

export class claimedTokens__Params {
  _event: claimedTokens;

  constructor(event: claimedTokens) {
    this._event = event;
  }

  get inheritor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class inheritorsAdded extends ethereum.Event {
  get params(): inheritorsAdded__Params {
    return new inheritorsAdded__Params(this);
  }
}

export class inheritorsAdded__Params {
  _event: inheritorsAdded;

  constructor(event: inheritorsAdded) {
    this._event = event;
  }

  get newInheritors(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class inheritorsRemoved extends ethereum.Event {
  get params(): inheritorsRemoved__Params {
    return new inheritorsRemoved__Params(this);
  }
}

export class inheritorsRemoved__Params {
  _event: inheritorsRemoved;

  constructor(event: inheritorsRemoved) {
    this._event = event;
  }

  get inheritors(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class tokenAllocated extends ethereum.Event {
  get params(): tokenAllocated__Params {
    return new tokenAllocated__Params(this);
  }
}

export class tokenAllocated__Params {
  _event: tokenAllocated;

  constructor(event: tokenAllocated) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get inheritors(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get amounts(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }
}

export class tokensDeposited extends ethereum.Event {
  get params(): tokensDeposited__Params {
    return new tokensDeposited__Params(this);
  }
}

export class tokensDeposited__Params {
  _event: tokensDeposited;

  constructor(event: tokensDeposited) {
    this._event = event;
  }

  get tokens(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get amounts(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }
}

export class vaultCreated extends ethereum.Event {
  get params(): vaultCreated__Params {
    return new vaultCreated__Params(this);
  }
}

export class vaultCreated__Params {
  _event: vaultCreated;

  constructor(event: vaultCreated) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get backup(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get startingBalance(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get inheritors_(): Array<Address> {
    return this._event.parameters[3].value.toAddressArray();
  }
}

export class SafeKeep__addInheritorsResult {
  value0: Array<Address>;
  value1: Array<BigInt>;

  constructor(value0: Array<Address>, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }
}

export class SafeKeep__allocateEtherResult {
  value0: Array<Address>;
  value1: Array<BigInt>;

  constructor(value0: Array<Address>, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }
}

export class SafeKeep__allocateTokensResult {
  value0: Array<Address>;
  value1: Array<BigInt>;

  constructor(value0: Array<Address>, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }
}

export class SafeKeep__checkAddressTokenAllocationsResultTAllocsStruct extends ethereum.Tuple {
  get token(): Address {
    return this[0].toAddress();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }
}

export class SafeKeep__checkAllEtherAllocationsResultEAllocsStruct extends ethereum.Tuple {
  get inheritor_(): Address {
    return this[0].toAddress();
  }

  get weiAlloc_(): BigInt {
    return this[1].toBigInt();
  }
}

export class SafeKeep__checkAllVaultTokenBalancesResult_tBalStruct extends ethereum.Tuple {
  get token_(): Address {
    return this[0].toAddress();
  }

  get bal_(): BigInt {
    return this[1].toBigInt();
  }
}

export class SafeKeep__checkBackupAddressAndPingResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class SafeKeep__checkVaultResultDeetsStruct extends ethereum.Tuple {
  get _owner(): Address {
    return this[0].toAddress();
  }

  get _VAULT_WEI_BALANCE(): BigInt {
    return this[1].toBigInt();
  }

  get _lastPing(): BigInt {
    return this[2].toBigInt();
  }

  get _id(): BigInt {
    return this[3].toBigInt();
  }

  get backup(): Address {
    return this[4].toAddress();
  }

  get _inheritors(): Array<Address> {
    return this[5].toAddressArray();
  }

  get tokensDeposited(): Array<Address> {
    return this[6].toAddressArray();
  }
}

export class SafeKeep__depositTokensResult {
  value0: Array<Address>;
  value1: Array<BigInt>;

  constructor(value0: Array<Address>, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }
}

export class SafeKeep__vaultDefaultIndexResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: Address;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: Address
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    return map;
  }
}

export class SafeKeep extends ethereum.SmartContract {
  static bind(address: Address): SafeKeep {
    return new SafeKeep("SafeKeep", address);
  }

  _whitelistedAssets(param0: Address): boolean {
    let result = super.call(
      "_whitelistedAssets",
      "_whitelistedAssets(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try__whitelistedAssets(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "_whitelistedAssets",
      "_whitelistedAssets(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  addInheritors(
    _vaultId: BigInt,
    _newInheritors: Array<Address>,
    _weiShare: Array<BigInt>
  ): SafeKeep__addInheritorsResult {
    let result = super.call(
      "addInheritors",
      "addInheritors(uint256,address[],uint256[]):(address[],uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(_vaultId),
        ethereum.Value.fromAddressArray(_newInheritors),
        ethereum.Value.fromUnsignedBigIntArray(_weiShare)
      ]
    );

    return new SafeKeep__addInheritorsResult(
      result[0].toAddressArray(),
      result[1].toBigIntArray()
    );
  }

  try_addInheritors(
    _vaultId: BigInt,
    _newInheritors: Array<Address>,
    _weiShare: Array<BigInt>
  ): ethereum.CallResult<SafeKeep__addInheritorsResult> {
    let result = super.tryCall(
      "addInheritors",
      "addInheritors(uint256,address[],uint256[]):(address[],uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(_vaultId),
        ethereum.Value.fromAddressArray(_newInheritors),
        ethereum.Value.fromUnsignedBigIntArray(_weiShare)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SafeKeep__addInheritorsResult(
        value[0].toAddressArray(),
        value[1].toBigIntArray()
      )
    );
  }

  allocateEther(
    _vaultId: BigInt,
    _inheritors: Array<Address>,
    _ethShares: Array<BigInt>
  ): SafeKeep__allocateEtherResult {
    let result = super.call(
      "allocateEther",
      "allocateEther(uint256,address[],uint256[]):(address[],uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(_vaultId),
        ethereum.Value.fromAddressArray(_inheritors),
        ethereum.Value.fromUnsignedBigIntArray(_ethShares)
      ]
    );

    return new SafeKeep__allocateEtherResult(
      result[0].toAddressArray(),
      result[1].toBigIntArray()
    );
  }

  try_allocateEther(
    _vaultId: BigInt,
    _inheritors: Array<Address>,
    _ethShares: Array<BigInt>
  ): ethereum.CallResult<SafeKeep__allocateEtherResult> {
    let result = super.tryCall(
      "allocateEther",
      "allocateEther(uint256,address[],uint256[]):(address[],uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(_vaultId),
        ethereum.Value.fromAddressArray(_inheritors),
        ethereum.Value.fromUnsignedBigIntArray(_ethShares)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SafeKeep__allocateEtherResult(
        value[0].toAddressArray(),
        value[1].toBigIntArray()
      )
    );
  }

  allocateTokens(
    _vaultId: BigInt,
    tokenAdd: Address,
    _inheritors: Array<Address>,
    _shares: Array<BigInt>
  ): SafeKeep__allocateTokensResult {
    let result = super.call(
      "allocateTokens",
      "allocateTokens(uint256,address,address[],uint256[]):(address[],uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(_vaultId),
        ethereum.Value.fromAddress(tokenAdd),
        ethereum.Value.fromAddressArray(_inheritors),
        ethereum.Value.fromUnsignedBigIntArray(_shares)
      ]
    );

    return new SafeKeep__allocateTokensResult(
      result[0].toAddressArray(),
      result[1].toBigIntArray()
    );
  }

  try_allocateTokens(
    _vaultId: BigInt,
    tokenAdd: Address,
    _inheritors: Array<Address>,
    _shares: Array<BigInt>
  ): ethereum.CallResult<SafeKeep__allocateTokensResult> {
    let result = super.tryCall(
      "allocateTokens",
      "allocateTokens(uint256,address,address[],uint256[]):(address[],uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(_vaultId),
        ethereum.Value.fromAddress(tokenAdd),
        ethereum.Value.fromAddressArray(_inheritors),
        ethereum.Value.fromUnsignedBigIntArray(_shares)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SafeKeep__allocateTokensResult(
        value[0].toAddressArray(),
        value[1].toBigIntArray()
      )
    );
  }

  checkAddressEtherAllocation(_vaultId: BigInt, _inheritor: Address): BigInt {
    let result = super.call(
      "checkAddressEtherAllocation",
      "checkAddressEtherAllocation(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_vaultId),
        ethereum.Value.fromAddress(_inheritor)
      ]
    );

    return result[0].toBigInt();
  }

  try_checkAddressEtherAllocation(
    _vaultId: BigInt,
    _inheritor: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "checkAddressEtherAllocation",
      "checkAddressEtherAllocation(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_vaultId),
        ethereum.Value.fromAddress(_inheritor)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  checkAddressTokenAllocations(
    _vaultId: BigInt,
    _inheritor: Address
  ): Array<SafeKeep__checkAddressTokenAllocationsResultTAllocsStruct> {
    let result = super.call(
      "checkAddressTokenAllocations",
      "checkAddressTokenAllocations(uint256,address):((address,uint256)[])",
      [
        ethereum.Value.fromUnsignedBigInt(_vaultId),
        ethereum.Value.fromAddress(_inheritor)
      ]
    );

    return result[0].toTupleArray<
      SafeKeep__checkAddressTokenAllocationsResultTAllocsStruct
    >();
  }

  try_checkAddressTokenAllocations(
    _vaultId: BigInt,
    _inheritor: Address
  ): ethereum.CallResult<
    Array<SafeKeep__checkAddressTokenAllocationsResultTAllocsStruct>
  > {
    let result = super.tryCall(
      "checkAddressTokenAllocations",
      "checkAddressTokenAllocations(uint256,address):((address,uint256)[])",
      [
        ethereum.Value.fromUnsignedBigInt(_vaultId),
        ethereum.Value.fromAddress(_inheritor)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        SafeKeep__checkAddressTokenAllocationsResultTAllocsStruct
      >()
    );
  }

  checkAllAddressVaults(_inheritor: Address): Array<BigInt> {
    let result = super.call(
      "checkAllAddressVaults",
      "checkAllAddressVaults(address):(uint256[])",
      [ethereum.Value.fromAddress(_inheritor)]
    );

    return result[0].toBigIntArray();
  }

  try_checkAllAddressVaults(
    _inheritor: Address
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "checkAllAddressVaults",
      "checkAllAddressVaults(address):(uint256[])",
      [ethereum.Value.fromAddress(_inheritor)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  checkAllEtherAllocations(
    _vaultId: BigInt
  ): Array<SafeKeep__checkAllEtherAllocationsResultEAllocsStruct> {
    let result = super.call(
      "checkAllEtherAllocations",
      "checkAllEtherAllocations(uint256):((address,uint256)[])",
      [ethereum.Value.fromUnsignedBigInt(_vaultId)]
    );

    return result[0].toTupleArray<
      SafeKeep__checkAllEtherAllocationsResultEAllocsStruct
    >();
  }

  try_checkAllEtherAllocations(
    _vaultId: BigInt
  ): ethereum.CallResult<
    Array<SafeKeep__checkAllEtherAllocationsResultEAllocsStruct>
  > {
    let result = super.tryCall(
      "checkAllEtherAllocations",
      "checkAllEtherAllocations(uint256):((address,uint256)[])",
      [ethereum.Value.fromUnsignedBigInt(_vaultId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        SafeKeep__checkAllEtherAllocationsResultEAllocsStruct
      >()
    );
  }

  checkAllVaultTokenBalances(
    _vaultId: BigInt
  ): Array<SafeKeep__checkAllVaultTokenBalancesResult_tBalStruct> {
    let result = super.call(
      "checkAllVaultTokenBalances",
      "checkAllVaultTokenBalances(uint256):((address,uint256)[])",
      [ethereum.Value.fromUnsignedBigInt(_vaultId)]
    );

    return result[0].toTupleArray<
      SafeKeep__checkAllVaultTokenBalancesResult_tBalStruct
    >();
  }

  try_checkAllVaultTokenBalances(
    _vaultId: BigInt
  ): ethereum.CallResult<
    Array<SafeKeep__checkAllVaultTokenBalancesResult_tBalStruct>
  > {
    let result = super.tryCall(
      "checkAllVaultTokenBalances",
      "checkAllVaultTokenBalances(uint256):((address,uint256)[])",
      [ethereum.Value.fromUnsignedBigInt(_vaultId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        SafeKeep__checkAllVaultTokenBalancesResult_tBalStruct
      >()
    );
  }

  checkBackupAddressAndPing(
    _vaultId: BigInt
  ): SafeKeep__checkBackupAddressAndPingResult {
    let result = super.call(
      "checkBackupAddressAndPing",
      "checkBackupAddressAndPing(uint256):(address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_vaultId)]
    );

    return new SafeKeep__checkBackupAddressAndPingResult(
      result[0].toAddress(),
      result[1].toBigInt()
    );
  }

  try_checkBackupAddressAndPing(
    _vaultId: BigInt
  ): ethereum.CallResult<SafeKeep__checkBackupAddressAndPingResult> {
    let result = super.tryCall(
      "checkBackupAddressAndPing",
      "checkBackupAddressAndPing(uint256):(address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_vaultId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SafeKeep__checkBackupAddressAndPingResult(
        value[0].toAddress(),
        value[1].toBigInt()
      )
    );
  }

  checkMyVaultTokenBalance(_vaultId: BigInt, token: Address): BigInt {
    let result = super.call(
      "checkMyVaultTokenBalance",
      "checkMyVaultTokenBalance(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_vaultId),
        ethereum.Value.fromAddress(token)
      ]
    );

    return result[0].toBigInt();
  }

  try_checkMyVaultTokenBalance(
    _vaultId: BigInt,
    token: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "checkMyVaultTokenBalance",
      "checkMyVaultTokenBalance(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_vaultId),
        ethereum.Value.fromAddress(token)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  checkOwnerVault(_vaultOwner: Address): BigInt {
    let result = super.call(
      "checkOwnerVault",
      "checkOwnerVault(address):(uint256)",
      [ethereum.Value.fromAddress(_vaultOwner)]
    );

    return result[0].toBigInt();
  }

  try_checkOwnerVault(_vaultOwner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "checkOwnerVault",
      "checkOwnerVault(address):(uint256)",
      [ethereum.Value.fromAddress(_vaultOwner)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  checkVault(_vaultId: BigInt): SafeKeep__checkVaultResultDeetsStruct {
    let result = super.call(
      "checkVault",
      "checkVault(uint256):((address,uint256,uint256,uint256,address,address[],address[]))",
      [ethereum.Value.fromUnsignedBigInt(_vaultId)]
    );

    return changetype<SafeKeep__checkVaultResultDeetsStruct>(
      result[0].toTuple()
    );
  }

  try_checkVault(
    _vaultId: BigInt
  ): ethereum.CallResult<SafeKeep__checkVaultResultDeetsStruct> {
    let result = super.tryCall(
      "checkVault",
      "checkVault(uint256):((address,uint256,uint256,uint256,address,address[],address[]))",
      [ethereum.Value.fromUnsignedBigInt(_vaultId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<SafeKeep__checkVaultResultDeetsStruct>(value[0].toTuple())
    );
  }

  checkVaultDepositedTokens(_vaultId: BigInt): Array<Address> {
    let result = super.call(
      "checkVaultDepositedTokens",
      "checkVaultDepositedTokens(uint256):(address[])",
      [ethereum.Value.fromUnsignedBigInt(_vaultId)]
    );

    return result[0].toAddressArray();
  }

  try_checkVaultDepositedTokens(
    _vaultId: BigInt
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "checkVaultDepositedTokens",
      "checkVaultDepositedTokens(uint256):(address[])",
      [ethereum.Value.fromUnsignedBigInt(_vaultId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  checkVaultEtherBalance(_vaultId: BigInt): BigInt {
    let result = super.call(
      "checkVaultEtherBalance",
      "checkVaultEtherBalance(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_vaultId)]
    );

    return result[0].toBigInt();
  }

  try_checkVaultEtherBalance(_vaultId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "checkVaultEtherBalance",
      "checkVaultEtherBalance(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_vaultId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  checkVaultTokenBalance(_vaultId: BigInt, token: Address): BigInt {
    let result = super.call(
      "checkVaultTokenBalance",
      "checkVaultTokenBalance(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_vaultId),
        ethereum.Value.fromAddress(token)
      ]
    );

    return result[0].toBigInt();
  }

  try_checkVaultTokenBalance(
    _vaultId: BigInt,
    token: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "checkVaultTokenBalance",
      "checkVaultTokenBalance(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_vaultId),
        ethereum.Value.fromAddress(token)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claimOwnership(_vaultId: BigInt, _backup: Address): Address {
    let result = super.call(
      "claimOwnership",
      "claimOwnership(uint256,address):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(_vaultId),
        ethereum.Value.fromAddress(_backup)
      ]
    );

    return result[0].toAddress();
  }

  try_claimOwnership(
    _vaultId: BigInt,
    _backup: Address
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "claimOwnership",
      "claimOwnership(uint256,address):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(_vaultId),
        ethereum.Value.fromAddress(_backup)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  depositTokens(
    _id: BigInt,
    tokenDeps: Array<Address>,
    _amounts: Array<BigInt>
  ): SafeKeep__depositTokensResult {
    let result = super.call(
      "depositTokens",
      "depositTokens(uint256,address[],uint256[]):(address[],uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(_id),
        ethereum.Value.fromAddressArray(tokenDeps),
        ethereum.Value.fromUnsignedBigIntArray(_amounts)
      ]
    );

    return new SafeKeep__depositTokensResult(
      result[0].toAddressArray(),
      result[1].toBigIntArray()
    );
  }

  try_depositTokens(
    _id: BigInt,
    tokenDeps: Array<Address>,
    _amounts: Array<BigInt>
  ): ethereum.CallResult<SafeKeep__depositTokensResult> {
    let result = super.tryCall(
      "depositTokens",
      "depositTokens(uint256,address[],uint256[]):(address[],uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(_id),
        ethereum.Value.fromAddressArray(tokenDeps),
        ethereum.Value.fromUnsignedBigIntArray(_amounts)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SafeKeep__depositTokensResult(
        value[0].toAddressArray(),
        value[1].toBigIntArray()
      )
    );
  }

  getAllInheritors(_vaultId: BigInt): Array<Address> {
    let result = super.call(
      "getAllInheritors",
      "getAllInheritors(uint256):(address[])",
      [ethereum.Value.fromUnsignedBigInt(_vaultId)]
    );

    return result[0].toAddressArray();
  }

  try_getAllInheritors(_vaultId: BigInt): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getAllInheritors",
      "getAllInheritors(uint256):(address[])",
      [ethereum.Value.fromUnsignedBigInt(_vaultId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  removeInheritors(
    _vaultId: BigInt,
    _inheritors: Array<Address>
  ): Array<Address> {
    let result = super.call(
      "removeInheritors",
      "removeInheritors(uint256,address[]):(address[])",
      [
        ethereum.Value.fromUnsignedBigInt(_vaultId),
        ethereum.Value.fromAddressArray(_inheritors)
      ]
    );

    return result[0].toAddressArray();
  }

  try_removeInheritors(
    _vaultId: BigInt,
    _inheritors: Array<Address>
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "removeInheritors",
      "removeInheritors(uint256,address[]):(address[])",
      [
        ethereum.Value.fromUnsignedBigInt(_vaultId),
        ethereum.Value.fromAddressArray(_inheritors)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  transferBackup(_vaultId: BigInt, _newBackup: Address): Address {
    let result = super.call(
      "transferBackup",
      "transferBackup(uint256,address):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(_vaultId),
        ethereum.Value.fromAddress(_newBackup)
      ]
    );

    return result[0].toAddress();
  }

  try_transferBackup(
    _vaultId: BigInt,
    _newBackup: Address
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "transferBackup",
      "transferBackup(uint256,address):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(_vaultId),
        ethereum.Value.fromAddress(_newBackup)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  transferOwner(_vaultId: BigInt, _newOwner: Address): Address {
    let result = super.call(
      "transferOwner",
      "transferOwner(uint256,address):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(_vaultId),
        ethereum.Value.fromAddress(_newOwner)
      ]
    );

    return result[0].toAddress();
  }

  try_transferOwner(
    _vaultId: BigInt,
    _newOwner: Address
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "transferOwner",
      "transferOwner(uint256,address):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(_vaultId),
        ethereum.Value.fromAddress(_newOwner)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  vaultDefaultIndex(param0: BigInt): SafeKeep__vaultDefaultIndexResult {
    let result = super.call(
      "vaultDefaultIndex",
      "vaultDefaultIndex(uint256):(address,uint256,uint256,uint256,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new SafeKeep__vaultDefaultIndexResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toAddress()
    );
  }

  try_vaultDefaultIndex(
    param0: BigInt
  ): ethereum.CallResult<SafeKeep__vaultDefaultIndexResult> {
    let result = super.tryCall(
      "vaultDefaultIndex",
      "vaultDefaultIndex(uint256):(address,uint256,uint256,uint256,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SafeKeep__vaultDefaultIndexResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toAddress()
      )
    );
  }

  withdrawEth(_vaultId: BigInt, _amount: BigInt): BigInt {
    let result = super.call(
      "withdrawEth",
      "withdrawEth(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_vaultId),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_withdrawEth(
    _vaultId: BigInt,
    _amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawEth",
      "withdrawEth(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_vaultId),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawTokens(
    _vaultId: BigInt,
    tokenAdds: Array<Address>,
    _amounts: Array<BigInt>
  ): boolean {
    let result = super.call(
      "withdrawTokens",
      "withdrawTokens(uint256,address[],uint256[]):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_vaultId),
        ethereum.Value.fromAddressArray(tokenAdds),
        ethereum.Value.fromUnsignedBigIntArray(_amounts)
      ]
    );

    return result[0].toBoolean();
  }

  try_withdrawTokens(
    _vaultId: BigInt,
    tokenAdds: Array<Address>,
    _amounts: Array<BigInt>
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "withdrawTokens",
      "withdrawTokens(uint256,address[],uint256[]):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_vaultId),
        ethereum.Value.fromAddressArray(tokenAdds),
        ethereum.Value.fromUnsignedBigIntArray(_amounts)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class AddInheritorsCall extends ethereum.Call {
  get inputs(): AddInheritorsCall__Inputs {
    return new AddInheritorsCall__Inputs(this);
  }

  get outputs(): AddInheritorsCall__Outputs {
    return new AddInheritorsCall__Outputs(this);
  }
}

export class AddInheritorsCall__Inputs {
  _call: AddInheritorsCall;

  constructor(call: AddInheritorsCall) {
    this._call = call;
  }

  get _vaultId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _newInheritors(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get _weiShare(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class AddInheritorsCall__Outputs {
  _call: AddInheritorsCall;

  constructor(call: AddInheritorsCall) {
    this._call = call;
  }

  get value0(): Array<Address> {
    return this._call.outputValues[0].value.toAddressArray();
  }

  get value1(): Array<BigInt> {
    return this._call.outputValues[1].value.toBigIntArray();
  }
}

export class AllocateEtherCall extends ethereum.Call {
  get inputs(): AllocateEtherCall__Inputs {
    return new AllocateEtherCall__Inputs(this);
  }

  get outputs(): AllocateEtherCall__Outputs {
    return new AllocateEtherCall__Outputs(this);
  }
}

export class AllocateEtherCall__Inputs {
  _call: AllocateEtherCall;

  constructor(call: AllocateEtherCall) {
    this._call = call;
  }

  get _vaultId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _inheritors(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get _ethShares(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class AllocateEtherCall__Outputs {
  _call: AllocateEtherCall;

  constructor(call: AllocateEtherCall) {
    this._call = call;
  }

  get value0(): Array<Address> {
    return this._call.outputValues[0].value.toAddressArray();
  }

  get value1(): Array<BigInt> {
    return this._call.outputValues[1].value.toBigIntArray();
  }
}

export class AllocateTokensCall extends ethereum.Call {
  get inputs(): AllocateTokensCall__Inputs {
    return new AllocateTokensCall__Inputs(this);
  }

  get outputs(): AllocateTokensCall__Outputs {
    return new AllocateTokensCall__Outputs(this);
  }
}

export class AllocateTokensCall__Inputs {
  _call: AllocateTokensCall;

  constructor(call: AllocateTokensCall) {
    this._call = call;
  }

  get _vaultId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get tokenAdd(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _inheritors(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get _shares(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }
}

export class AllocateTokensCall__Outputs {
  _call: AllocateTokensCall;

  constructor(call: AllocateTokensCall) {
    this._call = call;
  }

  get value0(): Array<Address> {
    return this._call.outputValues[0].value.toAddressArray();
  }

  get value1(): Array<BigInt> {
    return this._call.outputValues[1].value.toBigIntArray();
  }
}

export class ClaimCall extends ethereum.Call {
  get inputs(): ClaimCall__Inputs {
    return new ClaimCall__Inputs(this);
  }

  get outputs(): ClaimCall__Outputs {
    return new ClaimCall__Outputs(this);
  }
}

export class ClaimCall__Inputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }

  get _vaultId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ClaimCall__Outputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }
}

export class ClaimOwnershipCall extends ethereum.Call {
  get inputs(): ClaimOwnershipCall__Inputs {
    return new ClaimOwnershipCall__Inputs(this);
  }

  get outputs(): ClaimOwnershipCall__Outputs {
    return new ClaimOwnershipCall__Outputs(this);
  }
}

export class ClaimOwnershipCall__Inputs {
  _call: ClaimOwnershipCall;

  constructor(call: ClaimOwnershipCall) {
    this._call = call;
  }

  get _vaultId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _backup(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ClaimOwnershipCall__Outputs {
  _call: ClaimOwnershipCall;

  constructor(call: ClaimOwnershipCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class CreateVaultCall extends ethereum.Call {
  get inputs(): CreateVaultCall__Inputs {
    return new CreateVaultCall__Inputs(this);
  }

  get outputs(): CreateVaultCall__Outputs {
    return new CreateVaultCall__Outputs(this);
  }
}

export class CreateVaultCall__Inputs {
  _call: CreateVaultCall;

  constructor(call: CreateVaultCall) {
    this._call = call;
  }

  get inheritors(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _startingBal(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _backupAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class CreateVaultCall__Outputs {
  _call: CreateVaultCall;

  constructor(call: CreateVaultCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DepositEtherCall extends ethereum.Call {
  get inputs(): DepositEtherCall__Inputs {
    return new DepositEtherCall__Inputs(this);
  }

  get outputs(): DepositEtherCall__Outputs {
    return new DepositEtherCall__Outputs(this);
  }
}

export class DepositEtherCall__Inputs {
  _call: DepositEtherCall;

  constructor(call: DepositEtherCall) {
    this._call = call;
  }

  get _vaultId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositEtherCall__Outputs {
  _call: DepositEtherCall;

  constructor(call: DepositEtherCall) {
    this._call = call;
  }

  get currentEtherBalance(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DepositTokensCall extends ethereum.Call {
  get inputs(): DepositTokensCall__Inputs {
    return new DepositTokensCall__Inputs(this);
  }

  get outputs(): DepositTokensCall__Outputs {
    return new DepositTokensCall__Outputs(this);
  }
}

export class DepositTokensCall__Inputs {
  _call: DepositTokensCall;

  constructor(call: DepositTokensCall) {
    this._call = call;
  }

  get _id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get tokenDeps(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get _amounts(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class DepositTokensCall__Outputs {
  _call: DepositTokensCall;

  constructor(call: DepositTokensCall) {
    this._call = call;
  }

  get value0(): Array<Address> {
    return this._call.outputValues[0].value.toAddressArray();
  }

  get value1(): Array<BigInt> {
    return this._call.outputValues[1].value.toBigIntArray();
  }
}

export class PingCall extends ethereum.Call {
  get inputs(): PingCall__Inputs {
    return new PingCall__Inputs(this);
  }

  get outputs(): PingCall__Outputs {
    return new PingCall__Outputs(this);
  }
}

export class PingCall__Inputs {
  _call: PingCall;

  constructor(call: PingCall) {
    this._call = call;
  }

  get _vaultId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class PingCall__Outputs {
  _call: PingCall;

  constructor(call: PingCall) {
    this._call = call;
  }
}

export class RemoveInheritorsCall extends ethereum.Call {
  get inputs(): RemoveInheritorsCall__Inputs {
    return new RemoveInheritorsCall__Inputs(this);
  }

  get outputs(): RemoveInheritorsCall__Outputs {
    return new RemoveInheritorsCall__Outputs(this);
  }
}

export class RemoveInheritorsCall__Inputs {
  _call: RemoveInheritorsCall;

  constructor(call: RemoveInheritorsCall) {
    this._call = call;
  }

  get _vaultId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _inheritors(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }
}

export class RemoveInheritorsCall__Outputs {
  _call: RemoveInheritorsCall;

  constructor(call: RemoveInheritorsCall) {
    this._call = call;
  }

  get value0(): Array<Address> {
    return this._call.outputValues[0].value.toAddressArray();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferBackupCall extends ethereum.Call {
  get inputs(): TransferBackupCall__Inputs {
    return new TransferBackupCall__Inputs(this);
  }

  get outputs(): TransferBackupCall__Outputs {
    return new TransferBackupCall__Outputs(this);
  }
}

export class TransferBackupCall__Inputs {
  _call: TransferBackupCall;

  constructor(call: TransferBackupCall) {
    this._call = call;
  }

  get _vaultId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _newBackup(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class TransferBackupCall__Outputs {
  _call: TransferBackupCall;

  constructor(call: TransferBackupCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class TransferOwnerCall extends ethereum.Call {
  get inputs(): TransferOwnerCall__Inputs {
    return new TransferOwnerCall__Inputs(this);
  }

  get outputs(): TransferOwnerCall__Outputs {
    return new TransferOwnerCall__Outputs(this);
  }
}

export class TransferOwnerCall__Inputs {
  _call: TransferOwnerCall;

  constructor(call: TransferOwnerCall) {
    this._call = call;
  }

  get _vaultId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _newOwner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class TransferOwnerCall__Outputs {
  _call: TransferOwnerCall;

  constructor(call: TransferOwnerCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawEthCall extends ethereum.Call {
  get inputs(): WithdrawEthCall__Inputs {
    return new WithdrawEthCall__Inputs(this);
  }

  get outputs(): WithdrawEthCall__Outputs {
    return new WithdrawEthCall__Outputs(this);
  }
}

export class WithdrawEthCall__Inputs {
  _call: WithdrawEthCall;

  constructor(call: WithdrawEthCall) {
    this._call = call;
  }

  get _vaultId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawEthCall__Outputs {
  _call: WithdrawEthCall;

  constructor(call: WithdrawEthCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class WithdrawTokensCall extends ethereum.Call {
  get inputs(): WithdrawTokensCall__Inputs {
    return new WithdrawTokensCall__Inputs(this);
  }

  get outputs(): WithdrawTokensCall__Outputs {
    return new WithdrawTokensCall__Outputs(this);
  }
}

export class WithdrawTokensCall__Inputs {
  _call: WithdrawTokensCall;

  constructor(call: WithdrawTokensCall) {
    this._call = call;
  }

  get _vaultId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get tokenAdds(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get _amounts(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class WithdrawTokensCall__Outputs {
  _call: WithdrawTokensCall;

  constructor(call: WithdrawTokensCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
